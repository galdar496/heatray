//
//  perspective.rlsl
//  Heatray
//
//  Implement a perspective camera for primary ray generation.
//
//

#include "rayAttributes.rlsl"

#include "globalData.rlsl"
#include "sequence.rlsl"
#include "utility.rlsl"

uniform float fovTan; // tan(fov / 2) -- fov should be in radians.
uniform float aspectRatio;
uniform float focusDistance;
uniform float apertureRadius;
uniform mat4 viewMatrix;
uniform ivec2 blockSize;
uniform ivec2 currentBlockPixel;
uniform int interactiveMode;
uniform sampler2D apertureSamplesTexture;

void setup()
{
    rl_OutputRayCount = 1;
}

void main()
{
	// If we're in interactive mode then we'll only render a single pixel with a block of pixels.
	if (interactiveMode != 0)
	{
		ivec2 pixelOffset = ivec2(rl_FrameCoord.xy - vec2(0.5)) % blockSize;
		if (pixelOffset != currentBlockPixel)
		{
			return; 
		}
	}

	// This pixel is being sampled, increment its sample count.
	accumulate(vec4(0.0, 0.0, 0.0, 1.0));

	// Determine which sequence this pixel should use. This can and probably should be changed.
	float rand = random(rl_FrameCoord.xy / rl_FrameSize.xy);
	int sequenceID = int(floor(rand * kNumRandomSequences));
	
	vec2 sampleOffset = getSequenceValue(sequenceID, Globals.sampleIndex);
	vec2 samplePoint = (rl_FrameCoord.xy - vec2(0.5)) + sampleOffset; // -0.5 to get the lower-left corner of the pixel.
	vec2 pixelNDC = samplePoint / rl_FrameSize.xy;

	// The following math assumes that the image plane is 1 unit away from the camera origin.
	float x = (2.0 * pixelNDC.x - 1.0) * aspectRatio * fovTan;
	float y = (1.0 - 2.0 * pixelNDC.y) * fovTan * -1.0; // * -1 because this Y vector is upside down (OpenRL 0,0 is bottom left corner).
	vec3 dirCameraSpace = vec3(x, y, -1);

	vec3 dirWorldSpace = (viewMatrix * vec4(dirCameraSpace, 0.0)).xyz;

	// Compute the origin and direction based on the focal length and aperture of the camera (dof).
	vec3 cameraPosition = (viewMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
	vec3 focalPoint = cameraPosition + (focusDistance * dirWorldSpace); // Intersection point to focus the ray through.
	vec2 apertureSample = texture2D(apertureSamplesTexture, getSequenceUV(sequenceID, Globals.sampleIndex)).xy * apertureRadius;
	vec3 origin = cameraPosition + vec3(apertureSample, 0.0); // Randomize the ray origin to be somewhere within the aperture.
	vec3 dir = focalPoint - origin;

    createRay();
		rl_OutRay.origin		   = origin;
		rl_OutRay.direction		   = dir; // OpenRL auto-normalizes the direction for emitted rays.
		rl_OutRay.defaultPrimitive = Globals.environmentLight;
		rl_OutRay.weight           = vec3(1.0);
		rl_OutRay.sequenceID       = sequenceID;
	emitRay(); 
}


