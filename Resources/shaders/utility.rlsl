//
//  utility.rlsl
//  Heatray
//
//  Various utility functions.
//
//

float kPI = 3.14159265359;
float kTwoPI = 2.0 * kPI;
float kOneOverPI = 1.0 / kPI;
float kOneOverTwoPI = 1.0 / (kTwoPI);
float kPIOverTwo = kPI * 0.5;

float random(vec2 st) 
{
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

float saturate(float f)
{
	return clamp(f, 0.0, 1.0);
}

vec3 saturate(vec3 v)
{
	return clamp(v, vec3(0.0), vec3(1.0));
}

float square(float x)
{
	return x * x;
}

// Differs from GLSL sign() by never returning 0 as a "sign".  0 as a sign is a 
// bit of an odd choice and causes problems in various algorithms.
float getSign(float x)
{
	return x < 0. ? -1. : 1.;
}

// Note that Heatray is right-handed Y-up and the Frisvad algorithm is left-handed Z-up.
// This uses the revised Frisvad algorithm suggested by Pixar.
// https://graphics.pixar.com/library/OrthonormalB/paper.pdf
mat3 orthonormalFrame(const vec3 N)
{
	vec3 X;
	vec3 Z;
	vec3 leftHandedN = vec3(N.x, N.z, N.y);
	float s = getSign(leftHandedN.z);
	float a = -1.0 / (s + leftHandedN.z);
	float b = leftHandedN.x * leftHandedN.y * a;
	X = vec3(1.0 + s * leftHandedN.x * leftHandedN.x * a, s * b, -s * leftHandedN.x);
	Z = vec3(b, s + leftHandedN.y * leftHandedN.y * a, -leftHandedN.y);

	// Convert back to right-handed Y-up.
	X = vec3(X.x, X.z, X.y);
	Z = vec3(Z.x, Z.z, Z.y);
	return mat3(X, N, Z);
}

// The PDF for this function is:
//	cos(theta) / pi
vec3 cosineWeightedSample(float u1, float u2)
{
	// Importance sample.
	float theta = sqrt(u1);
	float phi = kTwoPI * u2;

	// Covert to cartesian coordinates. Heatray is Y up.
	float x = theta * cos(phi);
	float y = sqrt(max(0.0, 1.0 - u1));
	float z = theta * sin(phi);
	return normalize(vec3(x, y, z));
}

// The PDF for this function is:
//	(D * NdotH) / (4 * LdotH)
vec3 sampleGGX(float u1, float u2, float roughnessAlpha) // Returns the half-vector.
{
	// Importance sample.
	float a2 = square(roughnessAlpha);
	float cosTheta = sqrt(max(0.0, (1.0 - u1) / ((a2 - 1.0) * u1 + 1.0)));
	float sinTheta = sqrt(max(0.0, 1.0 - square(cosTheta)));
	float phi = kTwoPI * u2;

	// Convert to cartesian coordinates. Heatray is Y up.
	float x = sinTheta * cos(phi);
	float y = cosTheta;
	float z = sinTheta * sin(phi);
	return normalize(vec3(x, y, z));
}

// A more accurate GGX importance sample by taking masking into account.
// The PDF used to generate this function is:
//	(G1 * D * NdotL) / NdotH
// Adapted from: http://jcgt.org/published/0007/04/01/paper.pdf
// Note that this is isotropic but could be expanded to anisotropic by accounting for two roughness values.
vec3 sampleVisibleGGX(vec3 localSpaceV, float u1, float u2, float roughnessAlpha)
{
	// Stretch the view vector so we are sampling as though roughnessAlpha == 1.
	vec3 Vh = normalize(vec3(localSpaceV.x * roughnessAlpha, 
	                         localSpaceV.y, 
							 localSpaceV.z * roughnessAlpha));

	// Build an orthonormal basis about Vh.
	float lengthSquared = (Vh.x * Vh.x) + (Vh.z * Vh.z);
	vec3 T1 = lengthSquared > 0.0 ? vec3(-Vh.z, 0.0, Vh.x) * inversesqrt(lengthSquared) : vec3(1.0, 0.0, 0.0);
	vec3 T2 = cross(Vh, T1);

	// Parameterize the projected area.
	float sinTheta = sqrt(u1);
	float phi = kTwoPI * u2;
	float t1 = sinTheta * cos(phi);
	float t2 = sinTheta * sin(phi);
	float s = 0.5 * (1.0 + Vh.y);
	float t1Squared = square(t1);
	t2 = (1.0 - s) * sqrt(1.0 - t1Squared) + s * t2;

	// Calculate the normal in this stretched tangent space.
	vec3 Nh = t1 * T1 + sqrt(max(0.0, 1.0 - t1Squared - square(t2))) * Vh + t2 * T2;
	
	// Unstretch this normal.
	return normalize(vec3(roughnessAlpha * Nh.x, max(0.0, Nh.y), roughnessAlpha * Nh.z));
}

float pow5(float x)
{
	return x * square(x) * square(x);
}

mat3 transpose(mat3 m)
{
	return mat3(vec3(m[0].x, m[1].x, m[2].x),
				vec3(m[0].y, m[1].y, m[2].y),
				vec3(m[0].z, m[1].z, m[2].z));
}

float greaterThanZero(float f)
{
	return max(1e-5, f);
}

float positiveCharacteristic(float x)
{
	return (x > 0.0) ? 1.0 : 0.0;
}

float luminosity(vec3 color)
{
	return dot(color, vec3(0.33, 0.59, 0.11));
}

vec3 linearToSRGB(vec3 linear) {
	float SRGB_ALPHA = 0.055;
    vec3 result;
	for (int channel = 0; channel < 3; ++channel) {
		if (linear[channel] <= 0.0031308) {
			result[channel] = 12.92 * linear[channel];
		} else {
			result[channel] = 1.055 * pow(linear[channel], 1.0 / 2.4) - SRGB_ALPHA;
		}
	}

	return result;
}

vec3 sRGBToLinear(vec3 srgb) {
	float SRGB_ALPHA = 0.055;
    vec3 result;
	for (int channel = 0; channel < 3; ++channel) {
		if (srgb[channel] <= 0.04045) {
			result[channel] = srgb[channel] / 12.92;
		} else {
			result[channel] = pow((srgb[channel] + SRGB_ALPHA) / (1.0 + SRGB_ALPHA), 2.4);
		}
	}

	return result;
}
