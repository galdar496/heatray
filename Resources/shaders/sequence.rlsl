//
//  sequence.rlsl
//  Heatray
//
//  Handle the random sequence data with associated lookup functions.
//
//

uniformblock RandomSequences {
    vec2 randomNumbers[1];
};

uniformblock RandomSequenceMetadata {
    int numSequences;
    int sequenceLength;
};

vec2 getSequenceValue(int sequenceIndex, int sampleIndex)
{
    // Sequence data is ordered linearly in memory where each sequence index
    // follows each other. Therefore, accessing a particular sequence value
    // means first finding the right chunk of data based on the sequenceIndex and
    // then offsetting from there based on the sample index requested.
    int wrappedSequenceIndex = sequenceIndex % RandomSequenceMetadata.numSequences;
    int wrappedSequenceValue = sampleIndex % RandomSequenceMetadata.sequenceLength;
    vec2 value = RandomSequences.randomNumbers[wrappedSequenceIndex * RandomSequenceMetadata.sequenceLength + wrappedSequenceValue];
    return value;
}
