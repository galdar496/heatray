//
//  spotLight.rlsl
//  Heatray
//
//  Handle implementation of a spot light source.
//
//

#include "accumulator.rlsl"
#include "rayAttributes.rlsl"
#include "lightDefines.rlsl"

uniform int lightIndex; // Index of this light in the point light buffers.

void setup()
{
    rl_OutputRayCount[0] = 0; // No rays are fired from this shader.
}

void main()
{
    // Ensure that the incoming ray is coming from the right direction.
    float rayAngle = dot(-rl_InRay.direction, SpotLights.directions[lightIndex]);
    if (rayAngle >= 0.0) {
        // Perform a square falloff for the light intensity.
        float attenuation = 1.0 / square(rl_IntersectionT);

        // Lookup the color for this particular light.
        vec3 result = rl_InRay.weight * SpotLights.colors[lightIndex] * attenuation;

        // Perform a falloff given the ray angle and the inner/outer angles of the spot light.
        result *= 1.0 - smoothstep(SpotLights.angles[lightIndex].x, SpotLights.angles[lightIndex].y, rayAngle);

        performAccumulate(result);
    }
}