//
//  physicallyBased.rlsl
//  Heatray
//
//  Implement a physically-based material for hard-surfaces.
//
//

#include "globalData.rlsl"
#include "microfacet.rlsl"
#include "sequence.rlsl"

varying vec3 normal;

#if defined(HAS_BASE_COLOR_TEXTURE) || defined(HAS_METALLIC_ROUGHNESS_TEXTURE)
varying vec2 texCoord;
#endif // defined(HAS_BASE_COLOR_TEXTURE) || defined(HAS_METALLIC_ROUGHNESS_TEXTURE)

uniformblock Material {
	sampler2D baseColorTexture;
	sampler2D metallicRoughnessTexture;
	vec3 baseColor;
	float metallic;
	float roughness;
	float specularF0;
	float roughnessAlpha;
};

void setup()
{
    rl_OutputRayCount[0] = 2; // One for direct lighting, one for indirect lighting.
}

void main()
{
	if (rl_FrontFacing == false) return;

	vec3 N = normalize(normal);
	mat3 frame = orthonormalFrame(N);
	vec3 V = -rl_InRay.direction;
	float NdotV = saturate(dot(N, V));

#if defined(HAS_BASE_COLOR_TEXTURE)
	vec3 baseColor = Material.baseColor * texture2D(Material.baseColorTexture, texCoord).rgb; // TODO: convert this to a linear color.
#else
	vec3 baseColor = Material.baseColor;
#endif //  defined(HAS_BASE_COLOR_TEXTURE)

	float metallic = Material.metallic;
	float roughness = Material.roughness;
#if defined(HAS_METALLIC_ROUGHNESS_TEXTURE)
	vec2 metallicRoughness = texture2D(Material.metallicRoughnessTexture, texCoord).rg;
	metallic *= metallicRoughness.r;
	roughness *= metallicRoughness.g;
#endif defined(HAS_METALLIC_ROUGHNESS_TEXTURE)
	float roughnessAlpha = roughness * roughness;

    vec3 Cdiff = baseColor * (1.0 - metallic);
    // This approximation comes from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
	vec3 Cspec = 0.16 * square(Material.specularF0) * (1.0 - metallic) + baseColor * metallic;

	// The probability that we select the diffuse BRDF to sample while rendering.
	float diffuseLuminance  = max(0.01, luminosity(Cdiff));
    float specularLuminance = max(0.01, luminosity(Cspec));
    float diffuseProbability = diffuseLuminance / (diffuseLuminance + specularLuminance);

	// First sample the environment light.
	{
		vec2 rand = getSequenceValue(rl_InRay.sequenceID + rl_InRay.depth, Globals.sampleIndex);

		// Determine if we sample diffuse or specular.
		// For direct lighting, we always use the next sequence for this probability.
		vec2 probability = getSequenceValue(rl_InRay.sequenceID + rl_InRay.depth + 1, Globals.sampleIndex);
		if (probability.x < diffuseProbability) {
			sampleDiffuse(N, V, NdotV, frame, rand, Cdiff, Cspec, roughnessAlpha,
						  diffuseProbability, true, Globals.environmentLight);
		} else {
			sampleSpecular(N, V, NdotV, frame, rand, Cspec, roughnessAlpha,
						   1.0 - diffuseProbability, true, Globals.environmentLight);
		}
	}

	// Now sample the indirect lighting.
	if (rl_InRay.depth < Globals.maxRayDepth) {
		// For indirect lighting, we always use 2 sequences away for random numbers.
		vec2 rand = getSequenceValue(rl_InRay.sequenceID + rl_InRay.depth + 2, Globals.sampleIndex);

		// Determine if we sample diffuse or specular. We use 3 sequences away to determine this probability.
		vec2 probability = getSequenceValue(rl_InRay.sequenceID + rl_InRay.depth + 3, Globals.sampleIndex);
		if (probability.x < diffuseProbability) {
			sampleDiffuse(N, V, NdotV, frame, rand, Cdiff, Cspec, roughnessAlpha,
						  diffuseProbability, false, rl_NullPrimitive);
		} else {
			sampleSpecular(N, V, NdotV, frame, rand, Cspec, roughnessAlpha,
						   1.0 - diffuseProbability, false, rl_NullPrimitive);
		}
	}
}