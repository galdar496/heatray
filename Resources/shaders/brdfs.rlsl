//
//  brdfs.rlsl
//  Heatray
//
//  Various BRDFs implemented in Heatray.
//
//

#include "utility.rlsl"

vec3 hammonDiffuse(float LdotV, float NdotH, float NdotV, float NdotL, vec3 Cdiff, vec3 Cspec, float roughnessAlpha)
{
	// https://twvideo01.ubm-us.net/o1/vault/gdc2017/Presentations/Hammon_Earl_PBR_Diffuse_Lighting.pdf
	float facing = 0.5 + (0.5 * LdotV);
	float rough = facing * (0.9 - 0.4 * facing) * ((0.5 + NdotH) / greaterThanZero(NdotH));
	float smooth = 1.05 * (1.0 - pow5(1.0 - NdotL)) * (1.0 - pow5(1.0 - NdotV));
	float single = kOneOverPI * mix(smooth, rough, roughnessAlpha);
	float multi = 0.1159 * roughnessAlpha; // This is Hammon's approximation for diffuse multiscattering.

	// Note that the (1-Cspec) does not show up in Hammon's slides. This is because the math presented there has a minor
	// error which results in missing this term. Without this, the BRDF is not properly energy conserving.
	vec3 diffuse = Cdiff * (vec3(single) * (vec3(1.0) - Cspec) + Cdiff * vec3(multi));
	return diffuse;
}

vec3 lambertian(vec3 Cdiff)
{
	return Cdiff * kOneOverPI;
}

vec3 orenNayarDiffuse(vec3 Cdiff, float roughnessSquared, vec3 N, vec3 I, vec3 O)
{
	float NdotI = saturate(dot(N, I));
	float NdotO = saturate(dot(N, O));
	float A = 1.0 - 0.5 * (roughnessSquared / (roughnessSquared + 0.33));
	float B = (0.45 * roughnessSquared) / (roughnessSquared + 0.09);
	float cosPhi = dot(normalize(I - (NdotI * N)), normalize(O - (NdotO * N))); // cosine of phi_o and phi_i.
	float sinNI = sqrt(1.0 - square(NdotI));
	float sinNO = sqrt(1.0 - square(NdotO));
	float s = (NdotI < NdotO) ? sinNI : sinNO; // sin(alpha).
	float t = (NdotI > NdotO) ? sinNI / NdotI : sinNO / NdotO; // tan(beta).

	return Cdiff * (A + B * cosPhi * s * t); // note that there is no 1/pi here as we want it cancelled out (for PDF reasons).
}

vec3 F_Schlick(vec3 Cspec, float cosTheta)
{
	// Note that this assumes an F90 of 1.0.
	return Cspec + (1.0 - Cspec) * pow5(1.0 - cosTheta);
}


float F_Schlick(float specularF0, float cosTheta)
{
	// Note that this assumes an F90 of 1.0.
	return specularF0 + (1.0 - specularF0) * pow5(1.0 - cosTheta);
}

float F_Fresnel(float eta, float cosThetaI)
{
	float sinThetaT2 = square(eta) * (1.0 - square(cosThetaI));
	if (sinThetaT2 < 1.0) {
		float cosThetaT = sqrt(1.0 - sinThetaT2);
		float perpendicular = square((eta * cosThetaI - cosThetaT) / (eta * cosThetaI + cosThetaT));
		float parallel = square((cosThetaI - eta * cosThetaT) / (cosThetaI + eta * cosThetaT));

		return 0.5 * (perpendicular + parallel);
	}

	return 1.0;
}

float D_GGX(float NdotH, float roughnessAlpha)
{
	float alpha2 = square(roughnessAlpha);
	float denominator = square(square(NdotH) * (alpha2 - 1.0) + 1.0);
	return kOneOverPI * (alpha2 / greaterThanZero(denominator));
}

float G_Schlick(float NdotO, float NdotI, float roughnessAlpha)
{
	float k = square(roughnessAlpha) * 0.5;
	float gI = NdotI / (NdotI * (1.0 - k) + k);
	float gO = NdotO / (NdotO * (1.0 - k) + k);
	return gI * gO;
}

float G1_Smith_GGX(float NdotI, float roughnessAlpha)
{
	float alpha2 = square(roughnessAlpha);
	float denom = sqrt(alpha2 + (1.0 - alpha2) * square(NdotI)) + NdotI;
	return (2.0 * NdotI) / greaterThanZero(denom);
}

float G2_Smith_GGX(float NdotO, float NdotI, float roughnessAlpha)
{
	return G1_Smith_GGX(NdotO, roughnessAlpha) * G1_Smith_GGX(NdotI, roughnessAlpha);
}

// Version of Smith GGX G term that supports the entire sphere for sampling.
float G2_Smith_GGX(float NdotO, float HdotO, float NdotI, float HdotI, float roughnessAlpha)
{
	float G1L = positiveCharacteristic(HdotO / NdotO) * G1_Smith_GGX(abs(NdotO), roughnessAlpha);
	float G1V = positiveCharacteristic(HdotI / NdotI) * G1_Smith_GGX(abs(NdotI), roughnessAlpha);
	return G1L * G1V;
}
