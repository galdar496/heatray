//
//  perspective.frame
//  Heatray
//
//  Created by Cody White on 5/10/14.
//
//
// Implement a perspective camera model and generate primary rays.

rayattribute vec3 color;
rayattribute bool isDiffuseBounce;

uniform vec3 cameraPosition;               // Position of the camera in world space.
uniform vec3 forward;                      // Normalized forward vector from the camera.
uniform vec3 up;                           // Normalized up vector from the camera.
uniform vec3 right;                        // Normalized right vector from the camera.
uniform float fovTan;		               // Tangent of the camera's field of view.
uniform float aspectRatio;                 // Aspect ration of the camera.
uniform float focalLength;                 // Focal length of the camera.
uniform sampler2D jitterTexture;           // Random values to use as a jitter to the ray direction.
uniform sampler2D apertureSampleTexture;   // Random values within an aperture width to use to adjust the camera origin for depth of field.
uniform mat4 randomTextureMatrix;          // Random tex-coord transform matrix used for indexing to the random textures.

void setup()
{
    rl_OutputRayCount = 1;
}

void main()
{
    // Generate a random texture coordinate. Texture coordinates must be able to wrap.
    vec2 texCoord = (rl_FrameCoord.xy / rl_FrameSize.xy);
	texCoord = (randomTextureMatrix * vec4(texCoord.x, texCoord.y, 0.0, 1.0)).xy;
    
    vec2 jitter          = texture2D(jitterTexture, texCoord).xy;
    vec2 apertureSample = texture2D(apertureSampleTexture, texCoord).xy;
    
    vec2 frameCoord = ((rl_FrameCoord.xy + jitter) / rl_FrameSize.xy) - 0.5;
    vec3 dir = forward + (right * (fovTan * aspectRatio * frameCoord.x)) + (up * (fovTan * frameCoord.y));
    
    // Compute the origin and direction to use based on the focal length of the camera.
    vec3 focalPoint = cameraPosition + (focalLength * dir);   // Intersection point to focus the ray through.
    vec3 origin = cameraPosition + vec3(apertureSample, 0.0); // Randomize the ray origin to be somewhere within the aperture.
    dir = focalPoint - origin;
    
    createRay();
    rl_OutRay.origin    = origin;
    rl_OutRay.direction = dir;	// Direction is auto-normalized by OpenRL.
    rl_OutRay.color     = vec3(1.0);
    rl_OutRay.isDiffuseBounce = false;
    emitRay();
}


